name: Build and Deploy

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: Build Release APK
      run: ./gradlew assembleRelease
      
    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest
      continue-on-error: false
      
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ github.sha }}
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ github.sha }}
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 30
        
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ github.sha }}
        path: app/build/reports/tests/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: debug-apk-${{ github.sha }}
        path: ./apk
        
    - name: Deploy to Staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "APK ready for deployment: $(ls -la ./apk/)"
        # Add your staging deployment logic here
        # Example: Upload to Firebase App Distribution, TestFlight, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk-${{ github.sha }}
        path: ./apk
        
    - name: Deploy to Production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "Release APK ready for deployment: $(ls -la ./apk/)"
        # Add your production deployment logic here
        # Example: Upload to Google Play Store, App Store, etc.
