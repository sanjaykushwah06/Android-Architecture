name: Code Quality Gate

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better analysis
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Validate Gradle Wrapper
      run: ./gradlew wrapper --gradle-version=8.5
      
    - name: Run Detekt with baseline
      run: ./gradlew detekt
      continue-on-error: false
      
    - name: Run Lint with strict mode
      run: ./gradlew app:lintDebug --continue
      continue-on-error: false
      
    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest
      continue-on-error: false
      
    - name: Check for Detekt violations
      run: |
        if [ -f "app/build/reports/detekt/detekt.txt" ]; then
          VIOLATIONS=$(wc -l < app/build/reports/detekt/detekt.txt)
          echo "Detekt violations found: $VIOLATIONS"
          if [ $VIOLATIONS -gt 0 ]; then
            echo "::error::Detekt found $VIOLATIONS code quality issues. Please fix them before merging."
            cat app/build/reports/detekt/detekt.txt
            exit 1
          fi
        fi
        
    - name: Check for Lint violations
      run: |
        if [ -f "app/build/reports/lint-results-debug.xml" ]; then
          VIOLATIONS=$(grep -c "issue" app/build/reports/lint-results-debug.xml || echo "0")
          echo "Lint violations found: $VIOLATIONS"
          if [ $VIOLATIONS -gt 0 ]; then
            echo "::error::Lint found $VIOLATIONS issues. Please fix them before merging."
            exit 1
          fi
        fi
        
    - name: Check for Test failures
      run: |
        if [ -f "app/build/reports/tests/testDevelopmentDebugUnitTest/index.html" ]; then
          echo "Test reports generated successfully"
        else
          echo "::error::Unit tests failed. Please check the test results."
          exit 1
        fi
        
    - name: Upload Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-${{ github.sha }}
        path: |
          app/build/reports/detekt/
          app/build/reports/lint-results-debug.*
          app/build/reports/tests/
          
    - name: Comment PR with Quality Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## üîç Code Quality Report\n\n';
          
          // Check Detekt results
          try {
            if (fs.existsSync('app/build/reports/detekt/detekt.txt')) {
              const detektContent = fs.readFileSync('app/build/reports/detekt/detekt.txt', 'utf8');
              const violations = detektContent.split('\n').filter(line => line.trim()).length;
              if (violations > 0) {
                comment += `‚ùå **Detekt**: Found ${violations} code quality issues\n`;
                comment += '<details><summary>Click to see Detekt issues</summary>\n\n```\n';
                comment += detektContent.substring(0, 2000); // Limit to 2000 chars
                comment += '\n```\n</details>\n\n';
              } else {
                comment += '‚úÖ **Detekt**: No issues found\n\n';
              }
            }
          } catch (error) {
            comment += '‚ö†Ô∏è **Detekt**: Could not read results\n\n';
          }
          
          // Check Lint results
          try {
            if (fs.existsSync('app/build/reports/lint-results-debug.xml')) {
              const lintContent = fs.readFileSync('app/build/reports/lint-results-debug.xml', 'utf8');
              const violations = (lintContent.match(/<issue/g) || []).length;
              if (violations > 0) {
                comment += `‚ùå **Lint**: Found ${violations} issues\n`;
              } else {
                comment += '‚úÖ **Lint**: No issues found\n\n';
              }
            }
          } catch (error) {
            comment += '‚ö†Ô∏è **Lint**: Could not read results\n\n';
          }
          
          // Check Test results
          try {
            if (fs.existsSync('app/build/reports/tests/testDevelopmentDebugUnitTest/index.html')) {
              comment += '‚úÖ **Tests**: All unit tests passed\n\n';
            } else {
              comment += '‚ùå **Tests**: Some tests failed\n\n';
            }
          } catch (error) {
            comment += '‚ö†Ô∏è **Tests**: Could not read test results\n\n';
          }
          
          comment += '---\n*This report was generated automatically by the Code Quality Gate.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
